generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"] // Cloudflare Workers では必須
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ユーザーモデル
model User {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String     @unique
  name      String?    
  seqId     Int        @default(autoincrement()) @unique // シーケンシャルなID

  imageSets ImageSet[] // UserとImageSetの1対多の関係を定義

  createdAt DateTime   @default(now()) // 作成日時を自動設定
  updatedAt DateTime   @updatedAt // 更新日時を自動更新
  deletedAt DateTime? // 論理削除

  @@map("am_users") // テーブル名を明示的に指定
}

// 画像セットのステータスを定義するEnum ※sqliteでは非対応
enum ImageSetStatus {
  DRAFT
  SENT
  ARCHIVED
  DELETED
  // 今後、ステータスを増やしたい場合はここに追加
}

// 画像セットモデル
model ImageSet {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String?
  ownerId   String?  @db.Uuid // 外部キーとしてのユーザーID
  status    ImageSetStatus @default(DRAFT) // デフォルト値をDRAFTに設定
  seqId     Int       @default(autoincrement()) @unique // シーケンシャルなID

  owner      User?   @relation(fields: [ownerId], references: [id], onDelete: SetNull) // ユーザーモデルへのリレーション、ユーザー削除時はnullを設定

  createdAt DateTime @default(now()) // 作成日時を自動設定
  updatedAt DateTime @updatedAt // 更新日時を自動更新
  deletedAt DateTime? // 論理削除

  @@index([ownerId]) // ownerId フィールドにインデックスを追加
  @@map("dm_image_sets") // テーブル名を明示的に指定
}

// ファイルモデル
model File {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key           String   @unique // 一意のキーを設定
  filename      String   
  contentType   String    // MIMEタイプ
  size          Int
  version       Int      @default(1) // バージョン管理
  metadata      Json?    // ファイルメタデータ (JSON形式で柔軟に対応) ※sqliteでは非対応
  // metadata      String?  // ファイルメタデータ ※sqliteではこちらを使用

  fileAttachments FileAttachment[] // FileAttachmentとの関係を定義

  createdAt     DateTime @default(now()) // 作成日時を自動設定
  updatedAt     DateTime @updatedAt // 更新日時を自動更新
  deletedAt     DateTime? // 論理削除

  @@index([key]) // キーによる検索を高速化するためのインデックス
  @@map("dm_files") // テーブル名を明示的に指定
}

// 添付先のモデルタイプを定義するEnum ※sqliteでは非対応
enum AttachmentRecordType {
  USER
  IMAGE_SET
  // 今後、関連付けたいモデルが増えたらここに追加
}

// ファイル添付モデル
model FileAttachment {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  recordType    AttachmentRecordType // 関連するモデルのタイプ (Enumで型安全性を確保) ※sqliteでは非対応
  // recordType    String // 関連するモデルのタイプ ※sqliteではこちらを使用
  recordId      String      // 関連するレコードのID
  name          String      // 添付ファイルの用途 (例: "サムネイル", "オリジナル")
  fileId        String     @db.Uuid // Fileへの外部キー

  file      File @relation(fields: [fileId], references: [id], onDelete: Cascade) // ファイルモデルへのリレーション、ファイル削除時に添付も削除

  createdAt     DateTime @default(now()) // 作成日時を自動設定
  updatedAt     DateTime @updatedAt // 更新日時を自動更新

  @@index([fileId]) // fileIdによる検索を高速化するためのインデックス
  @@index([recordType, recordId]) // recordTypeとrecordIdによる検索を高速化するためのインデックス
  @@map("dm_file_attachments") // テーブル名を明示的に指定
}